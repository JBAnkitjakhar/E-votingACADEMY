/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EVoting {
  export type CandidateStruct = {
    id: BigNumberish;
    name: string;
    position: string;
    department: string;
    year: string;
  };

  export type CandidateStructOutput = [
    id: bigint,
    name: string,
    position: string,
    department: string,
    year: string
  ] & {
    id: bigint;
    name: string;
    position: string;
    department: string;
    year: string;
  };
}

export interface EVotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "candidates"
      | "castVote"
      | "endVoting"
      | "getAllVoterEmails"
      | "getCandidateCount"
      | "getCandidateUniqueNumbers"
      | "getCandidateVotes"
      | "getCandidates"
      | "getRemainingTime"
      | "hasVoted"
      | "isVotingActive"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "validCandidateIds"
      | "voterEmails"
      | "votingInfo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CandidateAdded"
      | "OwnershipTransferred"
      | "VoteCasted"
      | "VotingEnded"
      | "VotingStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endVoting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllVoterEmails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateUniqueNumbers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidateVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasVoted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isVotingActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validCandidateIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voterEmails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingInfo",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endVoting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllVoterEmails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateUniqueNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVotingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validCandidateIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterEmails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votingInfo", data: BytesLike): Result;
}

export namespace CandidateAddedEvent {
  export type InputTuple = [id: BigNumberish, name: string];
  export type OutputTuple = [id: bigint, name: string];
  export interface OutputObject {
    id: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastedEvent {
  export type InputTuple = [uniqueNumber: BigNumberish];
  export type OutputTuple = [uniqueNumber: bigint];
  export interface OutputObject {
    uniqueNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingStartedEvent {
  export type InputTuple = [startTime: BigNumberish, endTime: BigNumberish];
  export type OutputTuple = [startTime: bigint, endTime: bigint];
  export interface OutputObject {
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EVoting extends BaseContract {
  connect(runner?: ContractRunner | null): EVoting;
  waitForDeployment(): Promise<this>;

  interface: EVotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  candidates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string] & {
        id: bigint;
        name: string;
        position: string;
        department: string;
        year: string;
      }
    ],
    "view"
  >;

  castVote: TypedContractMethod<
    [email: string, candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  endVoting: TypedContractMethod<[], [void], "nonpayable">;

  getAllVoterEmails: TypedContractMethod<[], [string[]], "view">;

  getCandidateCount: TypedContractMethod<[], [bigint], "view">;

  getCandidateUniqueNumbers: TypedContractMethod<
    [candidateId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getCandidateVotes: TypedContractMethod<
    [candidateId: BigNumberish],
    [bigint],
    "view"
  >;

  getCandidates: TypedContractMethod<
    [],
    [EVoting.CandidateStructOutput[]],
    "view"
  >;

  getRemainingTime: TypedContractMethod<[], [bigint], "view">;

  hasVoted: TypedContractMethod<[arg0: string], [boolean], "view">;

  isVotingActive: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  validCandidateIds: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  voterEmails: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  votingInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, bigint] & {
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        totalVotes: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string] & {
        id: bigint;
        name: string;
        position: string;
        department: string;
        year: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [email: string, candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endVoting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllVoterEmails"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCandidateCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCandidateUniqueNumbers"
  ): TypedContractMethod<[candidateId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCandidateVotes"
  ): TypedContractMethod<[candidateId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCandidates"
  ): TypedContractMethod<[], [EVoting.CandidateStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRemainingTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVotingActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validCandidateIds"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "voterEmails"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "votingInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, bigint] & {
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
        totalVotes: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CandidateAdded"
  ): TypedContractEvent<
    CandidateAddedEvent.InputTuple,
    CandidateAddedEvent.OutputTuple,
    CandidateAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VoteCasted"
  ): TypedContractEvent<
    VoteCastedEvent.InputTuple,
    VoteCastedEvent.OutputTuple,
    VoteCastedEvent.OutputObject
  >;
  getEvent(
    key: "VotingEnded"
  ): TypedContractEvent<
    VotingEndedEvent.InputTuple,
    VotingEndedEvent.OutputTuple,
    VotingEndedEvent.OutputObject
  >;
  getEvent(
    key: "VotingStarted"
  ): TypedContractEvent<
    VotingStartedEvent.InputTuple,
    VotingStartedEvent.OutputTuple,
    VotingStartedEvent.OutputObject
  >;

  filters: {
    "CandidateAdded(uint256,string)": TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;
    CandidateAdded: TypedContractEvent<
      CandidateAddedEvent.InputTuple,
      CandidateAddedEvent.OutputTuple,
      CandidateAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VoteCasted(uint256)": TypedContractEvent<
      VoteCastedEvent.InputTuple,
      VoteCastedEvent.OutputTuple,
      VoteCastedEvent.OutputObject
    >;
    VoteCasted: TypedContractEvent<
      VoteCastedEvent.InputTuple,
      VoteCastedEvent.OutputTuple,
      VoteCastedEvent.OutputObject
    >;

    "VotingEnded()": TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;
    VotingEnded: TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;

    "VotingStarted(uint256,uint256)": TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;
    VotingStarted: TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;
  };
}
